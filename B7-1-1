/* 7. Write a C++ program to create a class called STACK using an array of integers. 
Implement the following operations by overloading + & - and display the contents of stack.

     i)	s1=s1+element; where s1 is an object of the class STACK and element is an integer to be pushed 
        onto top of the stack.
    ii)	s1=s1-; where s1 is an object of the class STACK and â€“ operator pops off the element. */

/*
In C++, we can make operators to work for user defined classes. This means C++ has the ability to 
provide the operators with a special meaning for a data type, this ability is known as operator overloading.

Syntax for C++ Operator Overloading
To overload an operator, we use a special operator function.

class className {
    ... .. ...
    public
       returnType operator symbol (arguments) {
           ... .. ...
       } 
    ... .. ...
};
Here,

returnType is the return type of the function.
operator is a keyword.
symbol is the operator we want to overload. Like: +, <, -, ++, etc.
arguments is the arguments passed to the function.*/


#include <iostream>
#include <stdlib.h>
#define size 20
//using namespace std;
class stack
{
  int a[size],top,ms;
  public:
  stack()
  {
           top=-1; cout<<"MAX:";
	   cin>>ms;
 }

 stack operator +(int ele)
 {
   if(top>ms-2)
   cout<<"Stack Overflow\n";
   else
       {
            top++;
            a[top]=ele;
        }

       return (*this);
 }

  stack operator --(int)
  {
    if(top==-1)
        cout<<"Stack Underflow";
    else
    cout<<"\nElement deleted is "<<a[top--];
    return (*this);
 }

 friend ostream& operator <<(ostream& c,stack s)
 {
    if(s.top==-1)
          cout<<"Stack Empty";
    else
    for(int j=s.top;j>=0;j--)
                 cout<<" "<<s.a[j];
    return c;
 }
}s;
int main()
{
  int ch,ele;
  while(1){
  cout<<"\nEnter your choice \n1:Enter an element\n2:Delete an element\n3:Display\nAnyother to Exit";
  cin>>ch;
  switch(ch)
  {
      case 1:cout<<"Enter the element:\n";  
	     cin>>ele
	     s=s+ele;
	     break;
      case 2:s=s--;
	     break;
      case 3:cout<<s;
	     break;
      default:exit(0);
   }
  }
return 0;
}

